{"version":3,"sources":["components/common/Pair.tsx","components/common/Help.tsx","constants.ts","types/band.ts","components/Spectrum.tsx","components/common/CollapsibleSection.tsx","Dashboard.tsx","components/GeneralConfig.tsx","components/AlarmConfig.tsx","Configuration.tsx","hooks/useFetchState.tsx","components/DeviceInfo.tsx","Documentation.tsx","components/common/Logo.tsx","components/Widget1.tsx","components/Service.tsx","components/Widget2.tsx","hooks/useAudio.tsx","Dabing.tsx","index.tsx"],"names":["NOT_AVAILABLE","style","fontWeight","Pair","pair","tooltipContent","parentTagStyle","keyTagStyle","valueTagStyle","key","className","Classes","TOOLTIP2_INDICATOR","content","position","unit","value","toLocaleString","Help","buttonProps","popoverClassName","TOOLTIP2","icon","minimal","intent","HOSTNAME","band","freq","channel","map","index","downsampleHelpContent","get_xData","ch","b","find","element","undefined","sf","Number","Array","from","length","_","i","Spectrum","React","useState","data","setData","xDataRef","useRef","zDataRef","changedTo","releasedTo","downsampleState","setDownsampleState","useEffect","fetch","then","response","a","ok","bodyUsed","text","current","catch","error","interval","setInterval","zData","Date","arrayBuffer","Float32Array","floatArray","yData","x","y","z","clearInterval","processedData","useMemo","k","result","sum","bottom_i","j","doDownscale","xValues","filter","item","slice","yValues","step","values","minValue","maxValue","Math","floor","push","get_values","textAlign","label","subLabel","inline","min","max","stepSize","labelStepSize","labelRenderer","onChange","p","onRelease","showTrackFill","vertical","layout","width","paddingTop","paddingRight","paddingBottom","paddingLeft","line","height","heatmap","marginTop","scale","options","xAxis","displayAxis","displayGrid","color","yAxis","zAxis","displayBins","theme","CollapsibleSection","children","defaultIsOpen","isOpen","setIsOpen","elevation","fill","large","outlined","alignText","margin","onClick","wasOpen","marginBottom","defaultTiis","pattern","comb","delay","delay_km","Dashboard","memo","mux","utcTime","utctime","day","year","month","hour","minutes","lto","UTC","toISOString","tiis","tii","tiisClassName","qi","ber","snr","fiber","power","signal","sync","id","bordered","condensed","interactive","striped","toFixed","ensemble","ecc","receiver","hardware","name","gain","software","version","formatBandText","renderBand","handleClick","toString","filterBand","query","bandItem","_index","exactMatch","normalizedChannel","toUpperCase","normalizedQuery","indexOf","BandSelect","Select","ofType","channelHelpContent","intervalHelpContent","trapEnabledHelpContent","agentIdentifierHelpContent","agentLabelHelpContent","managerHostnameHelpContent","managerPortHelpContent","postData","props","onStart","url","method","headers","body","JSON","stringify","onSuccess","onError","generalConfigReducer","prevState","newState","defaultGeneralConfig","agentIdentifier","agentLabel","managerHostname","managerPort","trapEnabled","GeneralConfig","isLoading","setIsLoading","setError","useReducer","generalConfig","dispatchGeneralConfig","e","test","evaluate","disableSubmit","Object","some","lock","json","Error","TheToaster","show","timeout","message","Response","status","statusText","labelFor","helperText","items","itemPredicate","itemRenderer","noResults","disabled","onItemSelect","option","popoverProps","usePortal","inputProps","placeholder","matchTargetWidth","majorStepSize","minorStepSize","asyncControl","buttonPosition","onValueChange","checked","small","rightElement","target","clampValueOnBlur","enabledHelpContent","thresholdHelpContent","triggerHelpContent","AlarmConfigElement","state","dispatchState","sliderProps","enabled","type","low","high","payload","leftIcon","trigger","alarmElementReducer","action","alarmConfigReducer","defaultAlarmConfig","AlarmConfig","alarmConfig","dispatchAlarmConfig","labelPrecision","Configuration","useFetchState","initialData","ms","setState","fetchData","s","defaultData","network","hostname","DeviceInfo","Documentation","Logo","StatusElement","tag","isOn","isOk","round","Widget1","btnState","setBtnState","lockRef","fetchLockRef","handleStartStop","start","finally","loading","title","description","asctyTooltipContent","subchidTooltipContent","dsctyTooltipContent","scidTooltipContent","Service","service","audio","dispatchAudio","audioButtonProps","url_mp3","sanitizedState","src","component","components","shortlabel","ptystring","onClose","sid","alt","isCloseButtonShown","DIALOG_BODY","dls","gridColumn","languagestring","mode","split","samplerate","subchannel","bitrate","ascty","subchid","sad","cu","language","programType","protection","dscty","scid","transportmode","textTransform","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","ptyTooltipContent","audioHelpContent","infoHelpContent","Widget2","services","sort","initAudio","isPlaying","initAudioRef","Audio","audioReducer","audioOnSuccess","audioOnError","Dabing","activePage","setPage","audioRef","publicDispatchAudio","check","currentSrc","play","pause","useAudio","Group","align","Heading","Divider","renderPage","Toaster","create","maxToasts","autoFocus","canEscapeKeyClear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c01ae793.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Tooltip2, Classes } from \"@blueprintjs/popover2\";\n\nconst NOT_AVAILABLE = \"N/A\";\n\nconst style: React.CSSProperties = {\n    fontWeight: 600\n};\n\ninterface IPairProps {\n    pair: {\n        key: string;\n        value: string | number | boolean | undefined;\n        unit?: string;\n    };\n    tooltipContent?: JSX.Element;\n    parentTagStyle?: React.CSSProperties;\n    keyTagStyle?: React.CSSProperties;\n    valueTagStyle?: React.CSSProperties;\n}\n\nconst Pair: React.FC<IPairProps> = ({\n    pair, tooltipContent, parentTagStyle, keyTagStyle, valueTagStyle\n}) => {\n\n    // apply Tooltip?\n    let key: JSX.Element = <>{pair.key}</>;\n    if (tooltipContent) {\n        key = (\n            <Tooltip2\n                className={Classes.TOOLTIP2_INDICATOR}\n                content={tooltipContent}\n                position=\"bottom\"\n            >{pair.key}</Tooltip2>\n        );\n    }\n\n    // is unit defined?\n    let unit: string = \"\";\n    if (pair.unit) {\n        unit = \" \" + pair.unit;\n    }\n\n    switch(typeof pair.value) {\n        case \"string\":\n            return (\n                <div style={parentTagStyle}>\n                    <div className=\"db-pair\" style={{...style, ...valueTagStyle}}>\n                        {pair.value === \"\" ? NOT_AVAILABLE : pair.value + unit}\n                    </div>\n                    <div className=\"bp3-text-muted\" style={keyTagStyle}>{key}</div>\n                </div>\n            );\n        case \"number\":\n            return (\n                <div style={parentTagStyle}>\n                    <div className=\"db-pair\" style={{...style, ...valueTagStyle}}>\n                        {pair.value === 0 ? NOT_AVAILABLE : pair.value.toLocaleString() + unit}\n                    </div>\n                    <div className=\"bp3-text-muted\" style={keyTagStyle}>{key}</div>\n                </div>\n            );\n        case \"boolean\":\n            return (\n                <div style={parentTagStyle}>\n                    <div className=\"dp-pair\" style={{...style, ...valueTagStyle}}>\n                        {pair.value ? \"True\" : \"False\"}\n                    </div>\n                    <div className=\"bp3-text-muted\" style={keyTagStyle}>{key}</div>\n                </div>\n            );\n        default:\n            break;\n    }\n\n    // rest...\n    return (\n        <div style={parentTagStyle}>\n            <div className=\"db-pair\" style={{...style, ...valueTagStyle}}>\n                {NOT_AVAILABLE}\n            </div>\n            <div className=\"bp3-text-muted\" style={keyTagStyle}>{key}</div>\n        </div>\n    );\n};\n\nexport default Pair;\n","import React from \"react\"\n\nimport { Button, ButtonProps } from \"@blueprintjs/core\";\nimport { Popover2 as Popover, Classes } from \"@blueprintjs/popover2\";\n\ninterface Props {\n    content: string | JSX.Element | undefined;\n    buttonProps?: ButtonProps;\n}\n\nconst Help: React.FC<Props> = ({ content, buttonProps }) => {\n    return (\n        <Popover content={content} popoverClassName={Classes.TOOLTIP2}>\n            <Button icon=\"help\" minimal={true} intent=\"primary\" style={{\"cursor\": \"help\"}} {...buttonProps} />\n        </Popover>\n    );\n};\n\nexport default Help;\n","//export const HOSTNAME = \"http://192.168.178.35:80/\";\nexport const HOSTNAME = \"/\";","export type TBand = {\n    key: number;\n    freq: string;\n    channel: string;\n};\n\nexport const band: TBand[] = [\n    { freq: \"174928\", channel: \"5A\" },\n    { freq: \"176640\", channel: \"5B\" },\n    { freq: \"178352\", channel: \"5C\" },\n    { freq: \"180064\", channel: \"5D\" },\n    { freq: \"181936\", channel: \"6A\" },\n    { freq: \"183648\", channel: \"6B\" },\n    { freq: \"185360\", channel: \"6C\" },\n    { freq: \"187072\", channel: \"6D\" },\n    { freq: \"188928\", channel: \"7A\" },\n    { freq: \"190640\", channel: \"7B\" },\n    { freq: \"192352\", channel: \"7C\" },\n    { freq: \"194064\", channel: \"7D\" },\n    { freq: \"195936\", channel: \"8A\" },\n    { freq: \"197648\", channel: \"8B\" },\n    { freq: \"199360\", channel: \"8C\" },\n    { freq: \"201072\", channel: \"8D\" },\n    { freq: \"202928\", channel: \"9A\" },\n    { freq: \"204640\", channel: \"9B\" },\n    { freq: \"206352\", channel: \"9C\" },\n    { freq: \"208064\", channel: \"9D\" },\n    { freq: \"209936\", channel: \"10A\" },\n    { freq: \"211648\", channel: \"10B\" },\n    { freq: \"213360\", channel: \"10C\" },\n    { freq: \"215072\", channel: \"10D\" },\n    { freq: \"216928\", channel: \"11A\" },\n    { freq: \"218640\", channel: \"11B\" },\n    { freq: \"220352\", channel: \"11C\" },\n    { freq: \"222064\", channel: \"11D\" },\n    { freq: \"223936\", channel: \"12A\" },\n    { freq: \"225648\", channel: \"12B\" },\n    { freq: \"227360\", channel: \"12C\" },\n    { freq: \"229072\", channel: \"12D\" },\n    { freq: \"230784\", channel: \"13A\" },\n    { freq: \"232496\", channel: \"13B\" },\n    { freq: \"234208\", channel: \"13C\" },\n    { freq: \"235776\", channel: \"13D\" },\n    { freq: \"237488\", channel: \"13E\" },\n    { freq: \"239200\", channel: \"13F\" }\n].map((band, index) => ({ ...band, key: index + 1 }));\n","import React from \"react\";\n\nimport { Divider, Spinner } from \"@blueprintjs/core\";\nimport { FormGroup, Slider } from \"@blueprintjs/core\";\n\nimport { Spectrogram } from \"react-spectrogram\";\nimport { SpectrogramData } from \"react-spectrogram\";\nimport { SpectrogramDatumX, SpectrogramDatumY, SpectrogramDatumZ }  from \"react-spectrogram\";\n\nimport Help from \"./common/Help\";\nimport { HOSTNAME } from \"../constants\";\nimport { band } from \"../types/band\";\n\n\nconst downsampleHelpContent: JSX.Element = (\n    <div>\n        <p>Data gets downsampled by the selected value.</p>\n        <p>If you do not want to downsample data, select 1.</p>\n        Note that when you set it to 1, information encoded in the color will <br />\n        be skewed because of how the canvas element works. <br />\n        (Canvas has fixed width of 1024px and we have 2048 data points.) <br />\n        (Canvas does aliasing when element's size is smaller than 1px.)\n    </div>\n);\n\nfunction doDownscale(data: number[], k: number): SpectrogramDatumY {\n    if (k === 1) return data;\n\n    let result: Array<number> = Array.from({ length: data.length / k });\n    for (let i = k - 1; i < data.length; i += 2) {\n        let sum = 0;\n        let bottom_i = i - k + 1;\n        for (let j = i; j >= bottom_i; j--) {\n            sum += data[j];\n        }\n        result[bottom_i] = sum / k;\n    }\n    return result;\n}\n\nfunction get_values(data: Array<number>, step: number): Array<number> {\n    let values: Array<number> = [];\n    if (data.length !== 0) {\n        let minValue: number = data[0];\n        let maxValue: number = data[0];\n        for (let i = 0; i < data.length; i++) {\n            if (data[i] < minValue) minValue = data[i];\n            if (data[i] > maxValue) maxValue = data[i];\n        }\n    \n        minValue = Math.floor(minValue);\n        minValue -= step + (minValue % step);\n        maxValue = Math.floor(maxValue);\n        maxValue += step - (maxValue % step);\n    \n        for (let value = minValue; value < maxValue; value += step) {\n            values.push(value);\n        }\n    }\n    return values;\n}\n\n// Expensive function\nfunction get_xData(ch: string): SpectrogramDatumX {\n    // find corresponding freq\n    const b = band.find((element) => element.channel === ch);\n    if (b !== undefined) {\n        // TM1 - all in kHz\n        //const carrierSpacing = 1;\n        const half_T_u = 1024;\n        const cf = Number(b.freq);      // carrier frequency\n        const sf = cf - half_T_u;       // start frequency\n        return Array.from({ length: 2048 }, (_, i) => sf + i);\n        //return Array.from({ length: 2048 }, (_, i) => sf + carrierSpacing*i);\n    }\n    // this will never happen but ok ts\n    return Array.from({ length: 2048 }, (_, i) => i);\n}\n\nconst Spectrum: React.FC = () => {\n    const [data, setData] = React.useState<SpectrogramData | null>(null);\n    const xDataRef = React.useRef<SpectrogramDatumX>(\n        get_xData(\"12C\")\n    );\n    const zDataRef = React.useRef<SpectrogramDatumZ>(\"\");\n    //const minRef = React.useRef<number | undefined>(undefined);\n    //const maxRef = React.useRef<number | undefined>(undefined);\n    const [downsampleState, setDownsampleState] = React.useState<{\n        changedTo: number;\n        releasedTo: number;\n    }>({ changedTo: 3, releasedTo: 3 });\n\n    React.useEffect(() => {\n        function getChannel() {\n            fetch(`${HOSTNAME}welle/channel`)\n            .then(async (response: Response) => {\n                if (response.ok) {\n                    if (response.bodyUsed) {\n                        const ch: string = await response.text();\n                        xDataRef.current = get_xData(ch);\n                    }\n                }\n            })\n            .catch((error: Error) => {\n                //console.log(\"error\");\n            });\n        }\n\n        getChannel();\n    }, []);\n\n    React.useEffect(() => {\n        function updateSpectrum() {\n            const zData: SpectrogramDatumZ = new Date();\n            zDataRef.current = zData;\n\n            fetch(`${HOSTNAME}welle/spectrum`)\n            .then((response: Response) => {\n                if (response.ok) {\n                    (zDataRef.current === zData) && response.arrayBuffer()\n                    .then((arrayBuffer: ArrayBuffer) => {\n                        return new Float32Array(arrayBuffer);\n                    }).then((floatArray: Float32Array) => {\n                        return Array.from(floatArray);\n                    }).then((yData: Array<number>) => {\n                        setData({\n                            x: xDataRef.current,\n                            y: yData,\n                            z: zData\n                        });\n                    });\n                }\n            });\n        }\n        // call fetchData function every n-th time of a frame\n        const interval = setInterval(updateSpectrum, 96 * 10);\n\n        //updateSpectrum();\n\n        return (() => clearInterval(interval));\n    }, []);\n\n    const processedData: SpectrogramDatumY = React.useMemo(() => {\n        if (data) {\n            return doDownscale(data.y, 2**downsampleState.releasedTo);\n        }\n        return [];\n        // Intentionally missing dependency 'downsampleState.releasedTo'\n        // this must execute only when data changes!\n        // eslint-disable-next-line\n    }, [data]);\n\n    /*if (data) {\n        if (minRef.current === undefined) minRef.current = data.y[0];\n        if (maxRef.current === undefined) maxRef.current = data.y[0];\n        let minChanged: boolean = false;\n        let maxChanged: boolean = false;\n        for (let i = 0; i < data.y.length; i++) {\n            if (data.y[i] < minRef.current) {\n                minChanged = true;\n                minRef.current = data.y[i];\n            }\n            if (data.y[i] > maxRef.current) {\n                maxChanged = true;\n                maxRef.current = data.y[i];\n            }\n        }\n\n        const step: number = 5;\n        if (minChanged) {\n            minRef.current = Math.floor(minRef.current);\n            let mod_minValue = minRef.current % step;\n            minRef.current -= step + mod_minValue;\n        }\n        if (maxChanged) {\n            maxRef.current = Math.floor(maxRef.current);\n            let mod_maxValue = maxRef.current % step;\n            maxRef.current += step - mod_maxValue;\n        }\n        for (let value = minRef.current; value < maxRef.current; value += step) {\n            values.push(value);\n        }\n    }*/\n\n    const xValues = xDataRef.current.filter((item, i) => (i % 128 === 0)).slice(1);\n    const yValues = get_values(processedData, 5);\n\n    if (data === null) {\n        return (\n            <>\n            <Spinner />\n            <p style={{ textAlign: \"center\" }}>Attempting to fetch spectrum data...</p>\n            </>\n        );\n    }\n\n    return (\n        <>\n        <div className=\"db-medium\">\n            <FormGroup\n                label=\"Downsample coeficient\"\n                subLabel={<Help content={downsampleHelpContent} />}\n                inline={true}\n                className=\"db-input-element\"\n            >\n                <Slider\n                    min={0}\n                    max={6}\n                    stepSize={1}\n                    labelStepSize={1}\n                    labelRenderer={(value) => (`${2**value}`)}\n                    onChange={(value) => setDownsampleState((p) => ({ ...p, changedTo: value }))}\n                    onRelease={(value) => setDownsampleState((p) => ({ ...p, releasedTo: value }))}\n                    value={downsampleState.changedTo}\n                    intent=\"primary\"\n                    showTrackFill={false}\n                    vertical={false}\n                />\n            </FormGroup>\n        </div>\n        <Divider />\n        <Spectrogram\n            data={{\n                x: data.x,\n                y: processedData,\n                z: data.z\n            }}\n            layout={{\n                width: 1024,\n                paddingTop: 40,\n                paddingRight: 0,\n                paddingBottom: 40,\n                paddingLeft: 70,\n                line: {\n                    height: yValues.length * 40\n                },\n                heatmap: {\n                    height: 200,\n                    marginTop: 32\n                },\n                scale: {\n                    height: 24,\n                    marginTop: 32\n                }\n            }}\n            options={{\n                xAxis: {\n                    displayAxis: true,\n                    displayGrid: true,\n                    values: xValues,\n                    color: \"black\"\n                },\n                yAxis: {\n                    displayAxis: true,\n                    displayGrid: true,\n                    //values: [0, 20, 40, 60, 80, 100],\n                    //values: [-30, -20, -10],\n                    values: yValues,\n                    color: \"black\"\n                },\n                zAxis: {\n                    displayAxis: true,\n                    displayBins: 10,\n                    color: \"black\"\n                },\n                theme: \"blue-green-red\"\n            }}\n        />\n        </>\n    );\n};\n\nexport default Spectrum;\n","import React, { useState } from \"react\";\n\nimport { Card, H3, Collapse, Button, Divider } from \"@blueprintjs/core\";\n\ninterface ICollapsibleSectionProps {\n    label: string;\n    defaultIsOpen?: boolean;\n}\n\nconst CollapsibleSection: React.FC<ICollapsibleSectionProps> = ({ children, label, defaultIsOpen = false }) => {\n    const [isOpen, setIsOpen] = useState<boolean>(defaultIsOpen);\n\n    return (\n        <Card className=\"db-card\" elevation={1}>\n            <Button\n                icon={isOpen ? \"caret-right\" : \"caret-down\"}\n                minimal={true}\n                fill={true}\n                large={true}\n                outlined={false}\n                alignText=\"left\"\n                text={ <H3 style={{ margin: 0 }}>{label}</H3> }\n                onClick={() => setIsOpen(wasOpen => !wasOpen)}\n            />\n            <Collapse isOpen={isOpen}>\n                <Divider style={{ marginBottom: \"1em\"}} />\n                {children}\n            </Collapse>\n        </Card>\n    );\n};\n\nexport default CollapsibleSection;\n","import React from \"react\";\n\nimport { Card, H3, HTMLTable, Callout } from \"@blueprintjs/core\";\n\nimport Pair from \"./components/common/Pair\";\nimport Spectrum from \"./components/Spectrum\";\nimport CollapsibleSection from \"./components/common/CollapsibleSection\";\nimport { IMuxProps, TypeMuxTii } from \"./types/mux\";\n\n\nconst defaultTiis: TypeMuxTii[] = [\n    {\n        pattern: 0,\n        comb: 0,\n        delay: 0,\n        delay_km: 0,\n        error: 0\n    }\n];\n\ninterface IDashboardProps extends IMuxProps {}\n\nconst Dashboard = React.memo<IDashboardProps>(({ mux }) => {\n\n    let utcTime: string = \"\";\n    if (mux !== undefined && mux.utctime.day !== 0) {\n        const {year, month, day, hour, minutes, lto} = mux.utctime;\n        utcTime = new Date(Date.UTC(year, month - 1, day, hour - lto, minutes)).toISOString();\n    }\n\n    const tiis = (mux ? mux.tii : defaultTiis);\n    const tiisClassName = (mux ? \"\" : \"bp3-skeleton\");\n\n    return (\n        <>\n        <Callout intent=\"primary\">\n            Do not forget to configure the application before starting the application!\n        </Callout>\n        <div className=\"db-medium-grid-container\">\n            <Card className=\"db-card db-primary-card bp3-text-large\" elevation={1} >\n                <Pair pair={{ key: \"Bit Error Ratio\", value: mux?.qi.ber }} />\n            </Card>\n            <Card className=\"db-card db-primary-card bp3-text-large\" elevation={1}>\n                <Pair pair={{ key: \"Signal Noise Ratio\", value: mux?.qi.snr, unit: \"dB\" }} />\n            </Card>\n            <Card className=\"db-card db-primary-card bp3-text-large\" elevation={1}>\n                <Pair pair={{ key: \"FIB Error Ratio\", value: mux?.qi.fiber }} />\n            </Card>\n            <Card className=\"db-card db-primary-card bp3-text-large\" elevation={1}>\n                <Pair pair={{ key: \"RF Power\", value: mux?.qi.power, unit: \"dBmV\" }} />\n            </Card>\n            <Card className=\"db-card db-primary-card bp3-text-large\" elevation={1}>\n                <Pair pair={{ key: \"Signal present\", value: mux?.qi.signal }} />\n            </Card>\n            <Card className=\"db-card db-primary-card bp3-text-large\" elevation={1}>\n                <Pair pair={{ key: \"Synchronized\", value: mux?.qi.sync }} />\n            </Card>\n        </div>\n        <div className=\"db-medium-grid-container\">\n            <Card className=\"db-card\" elevation={1} id=\"tii\">\n                <H3>Transmitter Identification Information</H3>\n                <HTMLTable\n                    bordered={false}\n                    condensed={true}\n                    interactive={false}\n                    striped={true}\n                    width=\"100%\"\n                    style={{\"marginTop\": \"10px\"}}\n                    className={tiisClassName}\n                >\n                <thead>\n                    <tr>\n                    <th style={{\"verticalAlign\":\"middle\"}}>Pattern</th>\n                    <th style={{\"verticalAlign\":\"middle\"}}>Comb</th>\n                    <th style={{\"verticalAlign\":\"middle\"}}>Delay</th>\n                    <th style={{\"verticalAlign\":\"middle\"}}>Delay [km]</th>\n                    <th style={{\"verticalAlign\":\"middle\"}}>Error</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tiis.map((tii) =>\n                        <tr key={`${tii.pattern}-${tii.comb}`}>\n                        <td style={{\"verticalAlign\":\"middle\"}}>{tii.pattern}</td>\n                        <td style={{\"verticalAlign\":\"middle\"}}>{tii.comb}</td>\n                        <td style={{\"verticalAlign\":\"middle\"}}>{tii.delay}</td>\n                        <td style={{\"verticalAlign\":\"middle\"}}>{tii.delay_km.toFixed(3)}</td>\n                        <td style={{\"verticalAlign\":\"middle\"}}>{tii.error.toFixed(3)}</td>\n                        </tr>\n                    )}\n                </tbody>\n                </HTMLTable>\n            </Card>\n            <Card className=\"db-card\" elevation={1}>\n                <H3>Ensemble</H3>\n                <div className=\"db-medium-grid-container\">\n                    <Pair pair={{ key: \"Label\", value: mux?.ensemble.label.label }} />\n                    <Pair pair={{ key: \"Ensemble Identifier\", value: mux?.ensemble.id }} />\n                    <Pair pair={{ key: \"Extended Country Code\", value: mux?.ensemble.ecc }} />\n                    <Pair pair={{ key: \"UTC Time\", value: utcTime }} />\n                </div>\n            </Card>\n            <Card className=\"db-card\" elevation={1}>\n                <H3 style={{ margin: \"0\" }}>Receiver</H3>\n                <div className=\"db-medium-grid-container\" style={{ marginTop: \"10px\" }}>\n                    <Pair pair={{ key: \"Hardware Name\", value: mux?.receiver.hardware.name }} />\n                    <Pair pair={{ key: \"Gain\", value: mux?.receiver.hardware.gain }} />\n                    <Pair pair={{ key: \"Software Name\", value: mux?.receiver.software.name }} />\n                    <Pair pair={{ key: \"Software Version\", value: mux?.receiver.software.version }} />\n                </div>\n            </Card>\n        </div>\n\n        <CollapsibleSection label=\"Spectrum\">\n            <Spectrum />\n        </CollapsibleSection>\n        </>\n    );\n});\n\nexport default Dashboard;\n","import React from \"react\";\n\nimport { Spinner } from \"@blueprintjs/core\";\nimport { Button, MenuItem, FormGroup } from \"@blueprintjs/core\";\nimport { Select, ItemPredicate, ItemRenderer } from \"@blueprintjs/select\";\nimport { NumericInput, Switch, InputGroup } from \"@blueprintjs/core\";\n\nimport Help from \"./common/Help\";\nimport { HOSTNAME } from \"../constants\";\nimport { TheToaster } from \"../index\";\nimport { band, TBand } from \"../types/band\";\n\n\ntype TGeneralConfig = {\n    band: TBand | undefined;\n    interval: number;\n    agentIdentifier: number;\n    agentLabel: string;\n    managerHostname: string;\n    managerPort: number;\n    trapEnabled: boolean;\n};\n\ntype TypeEval = {\n    band: string | undefined;\n    interval: string | undefined;\n    agentIdentifier: string | undefined;\n    agentLabel: string | undefined;\n    managerHostname: string | undefined;\n    managerPort: string | undefined;\n    trapEnabled: string | undefined;\n};\n\nfunction formatBandText(band: TBand): string {\n    return `${band.channel} \\u2013 ${band.freq} kHz`\n}\n\nconst renderBand: ItemRenderer<TBand> = (band, { handleClick }) => {\n    return (\n        <MenuItem\n            label={band.key.toString()}\n            key={band.key}\n            onClick={handleClick}\n            text={formatBandText(band)}\n        />\n    );\n};\n\nconst filterBand: ItemPredicate<TBand> = (query, bandItem, _index, exactMatch) => {\n    const normalizedChannel = bandItem.channel.toUpperCase() ;\n    const normalizedQuery = query.toUpperCase();\n\n    if (exactMatch) {\n        return (normalizedChannel === normalizedQuery) || (bandItem.freq === normalizedQuery);\n    } else {\n        return `${bandItem.key} ${bandItem.freq} ${normalizedChannel}`.indexOf(normalizedQuery) >= 0;\n    }\n};\n\nconst BandSelect = Select.ofType<TBand>();\n\nconst channelHelpContent: JSX.Element = (\n    <div>\n        Select the channel at which you want to monitor DAB signal. <br />\n        You can filter through all options by typing into the search input field.\n    </div>\n);\n\nconst intervalHelpContent: JSX.Element = (\n    <div>\n        The interval at which the commit to database is executed. <br />\n        Recommended is the multiple of 96 ms. For example: 960.\n    </div>\n);\n\nconst trapEnabledHelpContent: JSX.Element = (\n    <div>\n        In default configuration, the SNMP traps are disabled. <br />\n        If you want to receive notifications via SNMP protocol <br />\n        in case of emergency, enable this option.\n    </div>\n);\n\nconst agentIdentifierHelpContent: JSX.Element = (\n    <div>\n        This identifier will be included as a payload in SNMP trap notification. <br />\n        It is helpful to set unique identifier for each monitoring device in a network of devices.\n    </div>\n);\n\nconst agentLabelHelpContent: JSX.Element = (\n    <div>\n        Similarly to Agent Identifier, this label will be included <br />\n        as a payload in SNMP trap notification.\n    </div>\n);\n\nconst managerHostnameHelpContent: JSX.Element = (\n    <div>\n        IP address of a SNMP manager.\n    </div>\n);\n\nconst managerPortHelpContent: JSX.Element = (\n    <div>\n        Port of a SNMP manager.\n    </div>\n);\n\nfunction postData(props: {\n    url: string,\n    data: any,\n    onStart: () => void,\n    onSuccess: (response: Response) => void,\n    onError: (error: Error) => void\n}) {\n    props.onStart();\n\n    // POST\n    fetch(props.url, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(props.data)\n    })\n    .then((response: Response) => props.onSuccess(response))\n    .catch((error: Error) => props.onError(error));\n};\n\nfunction handleSave(data: any) {\n    postData({\n        url: `${HOSTNAME}flask/config/general`,\n        data: data,\n        onStart: () => {\n                TheToaster.show({\n                icon: \"info-sign\",\n                intent: \"primary\",\n                message: \"Attempting to save new general configuration...\"\n            });\n        },\n        onSuccess: (response) => {\n            if (response.ok) {\n                TheToaster.show({\n                    icon: \"tick\",\n                    intent: \"success\",\n                    message: \"Successfully saved new general configuration.\"\n                });\n            }\n            else {\n                TheToaster.show({\n                    icon: \"issue\",\n                    intent: \"danger\",\n                    timeout: 0,\n                    message: (<>\n                        [Error: {response.status} {response.statusText}] <br />\n                        <hr />\n                        Unable to save new general configuration!\n                    </>)\n                });\n            }\n        },\n        onError: (error) => {\n            TheToaster.show({\n                icon: \"issue\",\n                intent: \"danger\",\n                timeout: 0,\n                message: (<>\n                    [{error.name}] <br />\n                    [{error.message}] <br />\n                    <hr />\n                    Unable to save new general configuration!\n                </>)\n            });\n        }\n    });\n}\n\nfunction handleTest(data: any) {\n    postData({\n        url: `${HOSTNAME}flask/config/general`,\n        data: data,\n        onStart: () => {\n                TheToaster.show({\n                icon: \"info-sign\",\n                intent: \"primary\",\n                message: \"Attempting to test Simple Network Management Protocol trap...\"\n            });\n        },\n        onSuccess: (response) => {\n            if (response.ok) {\n                TheToaster.show({\n                    icon: \"tick\",\n                    intent: \"success\",\n                    message: \"Request to test Simple Network Management Protocol trap was successful.\"\n                });\n            }\n            else {\n                TheToaster.show({\n                    icon: \"issue\",\n                    intent: \"danger\",\n                    timeout: 0,\n                    message: (<>\n                        [Error: {response.status} {response.statusText}] <br />\n                        <hr />\n                        Unable to test Simple Network Management Protocol trap!\n                    </>)\n                });\n            }\n        },\n        onError: (error) => {\n            TheToaster.show({\n                icon: \"issue\",\n                intent: \"danger\",\n                timeout: 0,\n                message: (<>\n                    [{error.name}] <br />\n                    [{error.message}] <br />\n                    <hr />\n                    Unable to test Simple Network Management Protocol trap!\n                </>)\n            });\n        }\n    });\n}\n\nfunction evaluate(data: TGeneralConfig): TypeEval {\n    const rx: RegExp = /^(?!0)(?!.*\\.$)((1?\\d?\\d|25[0-5]|2[0-4]\\d)(\\.|$)){4}$/;\n    let a: TypeEval = { band: undefined, interval: undefined, agentIdentifier: undefined, agentLabel: undefined, managerHostname: undefined, managerPort: undefined, trapEnabled: undefined };\n\n    if (!a.band && data.band === undefined)\n        a.band = \"Select channel.\";\n    if (!a.interval && (data.interval % 1 !== 0)) // 10 % 1 === 0 => OK\n        a.interval = \"Enter decimal value.\";\n    if (!a.agentIdentifier && (data.agentIdentifier % 1 !== 0))\n        a.agentIdentifier = \"Enter decimal value.\";\n    if (!a.managerHostname && !rx.test(data.managerHostname))\n        a.managerHostname = \"Enter valid IP address.\";\n    if (!a.managerPort && (data.managerPort % 1 !== 0))\n        a.managerPort = \"Enter decimal value.\";\n    if (!a.managerPort && data.managerPort === 0)\n        a.managerPort = \"Enter valid port. Port 162 is assigned to SNMP trap.\";\n\n    return a;\n};\n\nconst generalConfigReducer = (prevState: TGeneralConfig, newState: Partial<TGeneralConfig>): TGeneralConfig => {\n    return {...prevState, ...newState};\n};\n\nconst defaultGeneralConfig: TGeneralConfig = {\n    band: undefined,\n    interval: 960,\n    agentIdentifier: 0,\n    agentLabel: \"Unique label has not been set\",\n    managerHostname: \"0.0.0.0\",\n    managerPort: 162,\n    trapEnabled: false\n};\n\nconst GeneralConfig = () => {\n    const [isLoading, setIsLoading] = React.useState<boolean>(true);\n    const [error, setError] = React.useState<Response | Error | undefined>(undefined);\n    const [generalConfig, dispatchGeneralConfig] = React.useReducer(generalConfigReducer, defaultGeneralConfig);\n\n    let e = evaluate(generalConfig);\n    /*if (!generalConfig.trapEnabled) {\n        // exception\n        e = {\n            ...e,\n            agentIdentifier: undefined,\n            agentLabel: undefined,\n            managerHostname: undefined,\n            managerPort: undefined\n        };\n    }*/\n    const disableSubmit = Object.values(e).some(element => element !== undefined);\n\n    React.useEffect(() => {\n        let lock: boolean = true;\n        lock && setIsLoading(true);\n        fetch(`${HOSTNAME}flask/config/general`)\n        .then(async (response: Response) => {\n            if (response.ok) {\n                lock && dispatchGeneralConfig(await response.json());\n                lock && setError(undefined);\n                lock && setIsLoading(false);\n            }\n            else {\n                lock && dispatchGeneralConfig(defaultGeneralConfig);\n                lock && setError(response);\n                lock && setIsLoading(false);\n            }\n        })\n        .catch((error: Error) => {\n            lock && dispatchGeneralConfig(defaultGeneralConfig);\n            lock && setError(error);\n            lock && setIsLoading(false);\n        });\n        return () => {\n            lock = false;\n        };\n    }, []);\n\n    React.useEffect(() => {\n        if (error instanceof Error) {\n            TheToaster.show({\n                icon: \"issue\",\n                intent: \"warning\",\n                timeout: 6000,\n                message: (<>\n                    [{error.name}] <br />\n                    [{error.message}] <br />\n                    <hr />\n                    Unable to fetch the current general configuration!\n                </>)\n            });\n        }\n        if (error instanceof Response) {\n            if (error.status === 404) {\n                TheToaster.show({\n                    icon: \"issue\",\n                    intent: \"primary\",\n                    timeout: 6000,\n                    message: (<>\n                        [Error: {error.status} {error.statusText}] <br />\n                        <hr />\n                        Unable to fetch the current general configuration! <br />\n                        <strong>File config.json does not exist yet.</strong>\n                    </>)\n                });\n            }\n            else {\n                TheToaster.show({\n                    icon: \"issue\",\n                    intent: \"warning\",\n                    timeout: 6000,\n                    message: (<>\n                        [Error: {error.status} {error.statusText}] <br />\n                        <hr />\n                        Unable to fetch the current general configuration!\n                    </>)\n                });\n            }\n        }\n    }, [error]);\n\n    if (isLoading) {\n        return (\n            <>\n            <Spinner />\n            <p style={{ textAlign: \"center\" }}>Attempting to fetch current general configuration.</p>\n            </>\n        );\n    }\n\n    return (\n        <div className=\"db-medium\">\n        <FormGroup\n            label=\"DAB+ Channel\"\n            subLabel={<Help content={channelHelpContent} />}\n            labelFor=\"db-input-channel\"\n            helperText={e.band}\n            inline={true}\n            className=\"db-input-element\"\n            intent={e.band === undefined ? \"none\" : \"danger\"}\n        >\n            <BandSelect\n                items={band}\n                itemPredicate={filterBand}\n                itemRenderer={renderBand}\n                noResults={<MenuItem disabled={true} text=\"No results.\" />}\n                onItemSelect={(option) => dispatchGeneralConfig({ band: option })}\n                popoverProps={{ fill: true, usePortal: false, position: \"bottom\" }}\n                inputProps={{placeholder: \"Search...\"}}\n                matchTargetWidth={true}\n            >\n                <Button\n                    id=\"db-input-channel\"\n                    text={generalConfig.band ? formatBandText(generalConfig.band) : \"(Select)\"}\n                    icon=\"caret-down\"\n                    alignText=\"left\"\n                    fill={true}\n                    intent={e.band === undefined ? \"none\" : \"danger\"}\n                />\n            </BandSelect>\n        </FormGroup>\n\n        <FormGroup\n            label=\"Interval\"\n            subLabel={<Help content={intervalHelpContent} />}\n            labelFor=\"db-input-interval\"\n            helperText={e.interval}\n            inline={true}\n            className=\"db-input-element\"\n            intent={e.interval === undefined ? \"none\" : \"danger\"}\n        >\n            <NumericInput\n                id=\"db-input-interval\"\n                min={96}\n                majorStepSize={null}\n                minorStepSize={null}\n                stepSize={96}\n                asyncControl={true}\n                buttonPosition={\"right\"}\n                fill={true}\n                value={generalConfig.interval}\n                onValueChange={(value) => dispatchGeneralConfig({ interval: value })}\n                intent={e.interval === undefined ? \"none\" : \"danger\"}\n            />\n        </FormGroup>\n\n        <FormGroup\n            label=\"Trap Enabled\"\n            subLabel={<Help content={trapEnabledHelpContent} />}\n            labelFor=\"db-input-trapEnabled\"\n            helperText={e.trapEnabled}\n            inline={true}\n            className=\"db-input-element\"\n            intent={e.trapEnabled === undefined ? \"none\" : \"danger\"}\n        >\n            <Switch\n                id=\"db-input-trapEnabled\"\n                checked={generalConfig.trapEnabled}\n                large={true}\n                onChange={() => dispatchGeneralConfig({ trapEnabled: !generalConfig.trapEnabled })}\n            />\n        </FormGroup>\n\n        <FormGroup\n            label=\"Agent Identifier\"\n            subLabel={<Help content={agentIdentifierHelpContent} />}\n            labelFor=\"db-input-agentIdentifier\"\n            helperText={e.agentIdentifier}\n            inline={true}\n            className=\"db-input-element\"\n            intent={e.agentIdentifier === undefined ? \"none\" : \"danger\"}\n            //disabled={!generalConfig.trapEnabled}\n        >\n            <NumericInput\n                id=\"db-input-agentIdentifier\"\n                min={0}\n                asyncControl={true}\n                buttonPosition={\"none\"}\n                fill={true}\n                value={generalConfig.agentIdentifier}\n                onValueChange={(value) => dispatchGeneralConfig({ agentIdentifier: value })}\n                intent={e.agentIdentifier === undefined ? \"none\" : \"danger\"}\n                //disabled={!generalConfig.trapEnabled}\n            />\n        </FormGroup>\n\n        <FormGroup\n            label=\"Agent Label\"\n            subLabel={<Help content={agentLabelHelpContent} />}\n            labelFor=\"db-input-agentLabel\"\n            helperText={e.agentLabel}\n            inline={true}\n            className=\"db-input-element\"\n            intent={e.agentLabel === undefined ? \"none\" : \"danger\"}\n            //disabled={!generalConfig.trapEnabled}\n        >\n            <InputGroup\n                id=\"db-input-agentLabel\"\n                asyncControl={true}\n                large={false}\n                small={false}\n                placeholder=\"My unique agent label\"\n                rightElement={undefined}\n                intent={e.agentLabel === undefined ? \"none\" : \"danger\"}\n                value={generalConfig.agentLabel}\n                onChange={(e) => dispatchGeneralConfig({ agentLabel: e.target.value })}\n                //disabled={!generalConfig.trapEnabled}\n            />\n        </FormGroup>\n\n        <FormGroup\n            label=\"Manager Hostname\"\n            subLabel={<Help content={managerHostnameHelpContent} />}\n            labelFor=\"db-input-managerHostname\"\n            helperText={e.managerHostname}\n            intent={e.managerHostname === undefined ? \"none\" : \"danger\"}\n            inline={true}\n            className=\"db-input-element\"\n            //disabled={!generalConfig.trapEnabled}\n        >\n            <InputGroup\n                id=\"db-input-managerHostname\"\n                asyncControl={true}\n                large={false}\n                small={false}\n                placeholder=\"Example: 123.4.0.56\"\n                rightElement={undefined}\n                intent={e.managerHostname === undefined ? \"none\" : \"danger\"}\n                value={generalConfig.managerHostname}\n                onChange={(e) => dispatchGeneralConfig({ managerHostname: e.target.value })}\n                //disabled={!generalConfig.trapEnabled}\n            />\n        </FormGroup>\n\n        <FormGroup\n            label=\"Manager Port\"\n            subLabel={<Help content={managerPortHelpContent} />}\n            labelFor=\"db-input-managerPort\"\n            helperText={e.managerPort}\n            inline={true}\n            className=\"db-input-element\"\n            intent={e.managerPort === undefined ? \"none\" : \"danger\"}\n            //disabled={!generalConfig.trapEnabled}\n        >\n            <NumericInput\n                id=\"db-input-managerPort\"\n                min={0}\n                max={65535}\n                clampValueOnBlur={true}\n                buttonPosition={\"none\"}\n                fill={true}\n                asyncControl={true}\n                value={generalConfig.managerPort}\n                onValueChange={(value) => dispatchGeneralConfig({ managerPort: value })}\n                intent={e.managerPort === undefined ? \"none\" : \"danger\"}\n                //disabled={!generalConfig.trapEnabled}\n            />\n        </FormGroup>\n\n        <div className=\"db-action-buttons\">\n            <Button\n                text=\"Save\"\n                icon=\"caret-right\"\n                intent=\"primary\"\n                disabled={disableSubmit}\n                large={true}\n                outlined={false}\n                onClick={() => handleSave(generalConfig)}\n            />\n            <Button\n                text=\"Test SNMP trap\"\n                icon=\"caret-right\"\n                intent=\"primary\"\n                disabled={disableSubmit}\n                large={true}\n                outlined={true}\n                onClick={() => handleTest(generalConfig)}\n            />\n        </div>\n        </div>\n    );\n};\n\nexport default GeneralConfig;\n","import React from \"react\";\n\nimport { H4, Spinner, Button, Card } from \"@blueprintjs/core\";\nimport { RangeSlider, RangeSliderProps, Switch, NumericInput } from \"@blueprintjs/core\";\nimport { FormGroup } from \"@blueprintjs/core\";\n\nimport Help from \"./common/Help\";\nimport { HOSTNAME } from \"../constants\";\nimport { TheToaster } from \"../index\";\n\n\ntype TypeAlarmElement = {\n    enabled: boolean;\n    low: number;\n    high: number;\n    trigger: number;\n};\n\ntype TypeAlarmConfig = {\n    snr: TypeAlarmElement;\n    ber: TypeAlarmElement;\n    power: TypeAlarmElement;\n    fiber: TypeAlarmElement;\n    signal: TypeAlarmElement\n    sync: TypeAlarmElement;\n};\n\ntype TypeAlarmConfigAction = {\n    type: \"snr\" | \"ber\" | \"power\" | \"fiber\" | \"signal\" | \"sync\" | \"all\";\n    payload: any;\n};\n\ntype TypeAlarmElementAction = {\n    type: \"enabled\" | \"low\" | \"high\" | \"trigger\";\n    payload?: any;\n};\n\nconst enabledHelpContent: JSX.Element = (\n    <div>\n        If you want this quality indicator <br />\n        to be taken into account in the <br />\n        evaluation process, then enable this option.\n    </div>\n);\n\nconst thresholdHelpContent: JSX.Element = (\n    <div>\n        The alarm is generated when the value is outside of the specified range.\n    </div>\n);\n\nconst triggerHelpContent: JSX.Element = (\n    <div>\n        Trigger time is the waiting time before the alarm is generated. <br />\n        Entered value is assumed to be in seconds.\n    </div>\n);\n\ninterface IAlarmConfigElementProps {\n    element: string;\n    label: string;\n    state: TypeAlarmElement;\n    dispatchState: React.Dispatch<TypeAlarmElementAction>;\n    sliderProps: RangeSliderProps;\n}\n\nconst AlarmConfigElement: React.FC<IAlarmConfigElementProps> = ({\n    element,\n    label,\n    state,\n    dispatchState,\n    sliderProps,\n}): JSX.Element => {\n    return (\n        <Card className=\"db-card db-primary-card\" elevation={1}>\n            <H4>{label}</H4>\n\n            <FormGroup\n                label=\"Enabled\"\n                subLabel={<Help content={enabledHelpContent} />}\n                labelFor={`db-input-${element}-enabled`}\n                inline={true}\n                className=\"db-input-element db-alarm-config-element\"\n            >\n                <Switch\n                    id={`db-input-${element}-enabled`}\n                    checked={state.enabled}\n                    label={undefined}\n                    onChange={() => dispatchState({ type: \"enabled\" })}\n                    large={true}\n                />\n            </FormGroup>\n            {\n                sliderProps.min === sliderProps.max ? <></> :\n            <FormGroup\n                label=\"Threshold\"\n                subLabel={<Help content={thresholdHelpContent} />}\n                disabled={!state.enabled}\n                inline={true}\n                className=\"db-input-element db-alarm-config-element\"\n            >\n                <RangeSlider\n                    {...sliderProps}\n                    onChange={([low, high]) => {\n                        if (low !== state.low) dispatchState({ type: \"low\", payload: low });\n                        if (high !== state.high) dispatchState({ type: \"high\", payload: high });\n                    }}\n                    value={[state.low, state.high]}\n                    disabled={!state.enabled}\n                    vertical={false}\n                    intent=\"primary\"\n                />\n            </FormGroup>\n            }\n            <FormGroup\n                label=\"Trigger\"\n                subLabel={<Help content={triggerHelpContent} />}\n                labelFor={`db-input-${element}-trigger`}\n                disabled={!state.enabled}\n                inline={true}\n                className=\"db-input-element db-alarm-config-element\"\n            >\n                <NumericInput\n                    id={`db-input-${element}-trigger`}\n                    min={0}\n                    asyncControl={true}\n                    disabled={!state.enabled}\n                    large={false}\n                    fill={true}\n                    leftIcon=\"stopwatch\"\n                    onValueChange={(trigger) => dispatchState({ type: \"trigger\", payload: trigger })}\n                    placeholder=\"60\"\n                    rightElement={undefined}\n                    value={state.trigger}\n                />\n            </FormGroup>\n        </Card>\n    );\n};\n\nconst alarmElementReducer = (state: TypeAlarmElement, action: TypeAlarmElementAction): TypeAlarmElement => {\n    if (action.type === \"enabled\") return { ...state, enabled: !state.enabled };\n    return { ...state, [action.type]: action.payload };\n};\n\nconst alarmConfigReducer = (state: TypeAlarmConfig, action: TypeAlarmConfigAction): TypeAlarmConfig => {\n    switch(action.type) {\n        case \"all\":\n            return action.payload;\n        case \"snr\":\n            return { ...state, snr: alarmElementReducer(state.snr, action.payload) };\n        case \"ber\":\n            return { ...state, ber: alarmElementReducer(state.ber, action.payload) };\n        case \"power\":\n            return { ...state, power: alarmElementReducer(state.power, action.payload) };\n        case \"fiber\":\n            return { ...state, fiber: alarmElementReducer(state.fiber, action.payload) };\n        case \"signal\":\n            return { ...state, signal: alarmElementReducer(state.signal, action.payload) };\n        case \"sync\":\n            return { ...state, sync: alarmElementReducer(state.sync, action.payload) };\n    }\n};\n\nconst defaultAlarmConfig: TypeAlarmConfig = {\n    snr: { enabled: true, low: 5, high: 25, trigger: 60 },\n    ber: { enabled: true, low: 0, high: 0.25, trigger: 10 },\n    power: { enabled: false, low: 20, high: 50, trigger: 10 },\n    fiber: { enabled: true, low: 0, high: 1, trigger: 10 },\n    signal: { enabled: true, low: 1, high: 1, trigger: 10 },\n    sync: { enabled: true, low: 1, high: 1, trigger: 10 }\n};\n\nconst AlarmConfig = () => {\n    const [isLoading, setIsLoading] = React.useState<boolean>(true);\n    const [error, setError] = React.useState<Response | Error | undefined>(undefined);\n    const [alarmConfig, dispatchAlarmConfig] = React.useReducer(alarmConfigReducer, defaultAlarmConfig);\n\n    // Nothing to evaluate\n    const disableSubmit: boolean = false;\n\n    React.useEffect(() => {\n        let lock: boolean = true;\n        lock && setIsLoading(true);\n        fetch(`${HOSTNAME}flask/config/alarm`)\n        .then(async (response: Response) => {\n            if (response.ok) {\n                lock && dispatchAlarmConfig({ type: \"all\", payload: await response.json() });\n                lock && setError(undefined);\n                lock && setIsLoading(false);\n            }\n            else {\n                lock && dispatchAlarmConfig({ type: \"all\", payload: defaultAlarmConfig });\n                lock && setError(response);\n                lock && setIsLoading(false);\n            }\n        })\n        .catch((error: Error) => {\n            lock && dispatchAlarmConfig({ type: \"all\", payload: defaultAlarmConfig });\n            lock && setError(error);\n            lock && setIsLoading(false);\n        });\n        return () => {\n            lock = false;\n        };\n    }, []);\n\n    React.useEffect(() => {\n        if (error instanceof Error) {\n            TheToaster.show({\n                icon: \"issue\",\n                intent: \"warning\",\n                timeout: 6000,\n                message: (<>\n                    [{error.name}] <br />\n                    [{error.message}] <br />\n                    <hr />\n                    Unable to fetch the current alarm configuration!\n                </>)\n            });\n        }\n        if (error instanceof Response) {\n            if (error.status === 404) {\n                TheToaster.show({\n                    icon: \"issue\",\n                    intent: \"primary\",\n                    timeout: 6000,\n                    message: (<>\n                        [Error: {error.status} {error.statusText}] <br />\n                        <hr />\n                        Unable to fetch the current alarm configuration! <br />\n                        <strong>File alarmConfig.json does not exist yet.</strong>\n                    </>)\n                });\n            }\n            else {\n                TheToaster.show({\n                    icon: \"issue\",\n                    intent: \"warning\",\n                    timeout: 6000,\n                    message: (<>\n                        [Error: {error.status} {error.statusText}] <br />\n                        <hr />\n                        Unable to fetch the current alarm configuration!\n                    </>)\n                });\n            }\n        }\n    }, [error]);\n\n    const handleSubmit = () => {\n        TheToaster.show({\n            icon: \"info-sign\",\n            intent: \"primary\",\n            message: \"Attempting to save new alarm configuration...\"\n        });\n\n        // POST\n        fetch(`${HOSTNAME}flask/config/alarm`,\n            {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(alarmConfig)\n            }\n        )\n        .then(async (response: Response) => {\n            if (response.ok) {\n                TheToaster.show({\n                    icon: \"tick\",\n                    intent: \"success\",\n                    message: \"Successfully saved new alarm configuration.\"\n                });\n            }\n            else {\n                TheToaster.show({\n                    icon: \"issue\",\n                    intent: \"danger\",\n                    timeout: 0,\n                    message: (<>\n                        [Error: {response.status} {response.statusText}] <br />\n                        <hr />\n                        Unable to save new alarm configuration!\n                    </>)\n                });\n            }\n        })\n        .catch((error: Error) => {\n            TheToaster.show({\n                icon: \"issue\",\n                intent: \"danger\",\n                timeout: 0,\n                message: (<>\n                    [{error.name}] <br />\n                    [{error.message}] <br />\n                    <hr />\n                    Unable to save new alarm configuration!\n                </>)\n            });\n        });\n    };\n\n    if (isLoading) {\n        return (\n            <>\n            <Spinner />\n            <p style={{ textAlign: \"center\" }}>Attempting to fetch current alarm configuration.</p>\n            </>\n        );\n    }\n\n    return (\n        <>\n        <div className=\"db-large-grid-container\">\n            <AlarmConfigElement\n                element=\"snr\"\n                label=\"Signal Noise Ratio\"\n                state={alarmConfig.snr}\n                dispatchState={(action) => dispatchAlarmConfig({ type: \"snr\", payload: action })}\n                sliderProps={{ min: 0, max: 50, stepSize: 1, labelStepSize: 5 }}\n            />\n            <AlarmConfigElement\n                element=\"ber\"\n                label=\"Bit Error Ratio\"\n                state={alarmConfig.ber}\n                dispatchState={(action) => dispatchAlarmConfig({ type: \"ber\", payload: action })}\n                sliderProps={{ min: 0, max: 0.5, stepSize: 0.01, labelStepSize: 0.1 }}\n            />\n            <AlarmConfigElement\n                element=\"power\"\n                label=\"Power\"\n                state={alarmConfig.power}\n                dispatchState={(action) => dispatchAlarmConfig({ type: \"power\", payload: action })}\n                sliderProps={{ min: 0, max: 80, stepSize: 1, labelStepSize: 20 }}\n            />\n            <AlarmConfigElement\n                element=\"fiber\"\n                label=\"FIB Error Ratio\"\n                state={alarmConfig.fiber}\n                dispatchState={(action) => dispatchAlarmConfig({ type: \"fiber\", payload: action })}\n                sliderProps={{ min: 0, max: 1, stepSize: 0.083, labelStepSize: 0.25, labelPrecision: 2 }}\n            />\n            <AlarmConfigElement\n                element=\"signal\"\n                label=\"Signal Present\"\n                state={alarmConfig.signal}\n                dispatchState={(action) => dispatchAlarmConfig({ type: \"signal\", payload: action })}\n                sliderProps={{ min: 1, max: 1, stepSize: 1, labelStepSize: 1 }}\n                // in this case, slider does not make sense\n            />\n            <AlarmConfigElement\n                element=\"sync\"\n                label=\"Synchronization\"\n                state={alarmConfig.sync}\n                dispatchState={(action) => dispatchAlarmConfig({ type: \"sync\", payload: action })}\n                sliderProps={{ min: 1, max: 1, stepSize: 1, labelStepSize: 1 }}\n                // in this case, slider does not make sense\n            />\n        </div>\n\n        <Button\n            text=\"Save\"\n            icon=\"caret-right\"\n            intent=\"primary\"\n            disabled={disableSubmit}\n            large={true}\n            outlined={false}\n            onClick={handleSubmit}\n        />\n        </>\n    );\n};\n\nexport default AlarmConfig;\n","import React from \"react\";\n\nimport GeneralConfig from \"./components/GeneralConfig\";\nimport AlarmConfig from \"./components/AlarmConfig\";\n\nimport CollapsibleSection from \"./components/common/CollapsibleSection\";\n\n\nconst Configuration = React.memo(() => {\n    return (\n        <>\n            <CollapsibleSection label=\"General configuration\" defaultIsOpen={false}>\n                <GeneralConfig />\n            </CollapsibleSection>\n            <CollapsibleSection label=\"Alarm configuration\" defaultIsOpen={false}>\n                <AlarmConfig />\n            </CollapsibleSection>\n        </>\n    );\n});\n\nexport default Configuration;\n","import { useState, useEffect } from \"react\";\n\n\ntype TypeFetchState<T> = {\n    isLoading: boolean;\n    data: T;\n    error: Response | Error | undefined;\n}\n\nexport function useFetchState<T>(\n    initialData: T,\n    url: string,\n    options: RequestInit | undefined,\n    ms: number | undefined\n): TypeFetchState<T> {\n    const [state, setState] = useState<TypeFetchState<T>>({\n        isLoading: true,\n        data: initialData,\n        error: undefined\n    });\n\n    useEffect(() => {\n        let lock: boolean = true;\n        function fetchData() {\n            setState(s => {\n                return {\n                    ...s,\n                    isLoading: true\n                };\n            });\n            fetch(url, options)\n            .then(async (response: Response) => {\n                if (response.ok) {\n                    lock && setState({\n                        isLoading: false,\n                        data: await response.json(),\n                        error: undefined\n                    });\n                }\n                else {\n                    lock && setState({\n                        isLoading: false,\n                        data: initialData,\n                        error: response\n                    });\n                }\n            })\n            .catch((error: Error) => {\n                lock && setState({\n                    isLoading: false,\n                    data: initialData,\n                    error: error\n                });\n            });\n        }\n\n        let id: any = null;\n        if (ms !== undefined) {\n            id = setInterval(fetchData, ms);\n        }\n        else {\n            fetchData();\n        }\n\n        return () => {\n            lock = false;\n            clearInterval(id);\n        };\n    }, [initialData, url, options, ms]);\n\n    return state;\n}\n","import React from \"react\";\n\nimport { HOSTNAME } from \"../constants\";\nimport { useFetchState } from \"../hooks/useFetchState\";\n\n\ntype TDeviceInfo = {\n    hardware: string;\n    software: string;\n    network:  string;\n    hostname: string;\n};\n\nconst defaultData: TDeviceInfo = {\n    hardware: \"My awesome hardware\",\n    software: \"My awesome software\",\n    network:  \"My awesome network\",\n    hostname: \"My awesome hostname\"\n};\n\nconst DeviceInfo: React.FC = () => {\n    const {\n        // eslint-disable-next-line\n        isLoading, data, error\n    } = useFetchState<TDeviceInfo>(\n        defaultData,\n        `${HOSTNAME}flask/info/device`,\n        undefined,\n        undefined\n    );\n\n    const className = (error !== undefined || isLoading ? \"bp3-skeleton\" : \"\");\n\n    return (\n        <table className=\"db-table db-th-left\">\n            <tbody>\n            <tr>\n                <th className={className}>Hardware:</th>\n                <td className={className}>{data.hardware}</td>\n            </tr>\n            <tr>\n                <th className={className}>Software:</th>\n                <td className={className}>{data.software}</td>\n            </tr>\n            <tr>\n                <th className={className}>Network:</th>\n                <td className={className}>{data.network }</td>\n            </tr>\n            <tr>\n                <th className={className}>Hostname:</th>\n                <td className={className}>{data.hostname}</td>\n            </tr>\n            </tbody>\n        </table>\n    )\n}\n\nexport default DeviceInfo;\n","import React from \"react\"\n\nimport Pair from \"./components/common/Pair\";\nimport DeviceInfo from \"./components/DeviceInfo\";\nimport CollapsibleSection from \"./components/common/CollapsibleSection\";\nimport { Divider } from \"@blueprintjs/core\";\n\n\nconst Documentation = React.memo(() => {\n    return (\n        <>\n        <CollapsibleSection label=\"User's manual\">\n            <div className=\"db-medium\">\n<p className=\"bp3-running-text\">\nHello and thank you for taking the time to read this user's manual. The purpose of this manual si to explain how to interact with this monitoring device of <em>Digital Audio Broadcasting</em> (DAB). If you stumple upon any abbreviation which you don't know the meaning of, feel free to visit the next section <em>Glossary</em> in the <em>Documentation</em> tab. If you don't know what to do in a specific situation or section, look for blue help button in close proximity for detailed explanation.\n</p>\n<p className=\"bp3-running-text\">\nIn order for the monitoring device to work properly, it is crucial to set up the monitoring device before starting the device. Monitoring device can be set up in the section <em>General Configuration</em> in the <em>Configuration</em> tab.\nThe most important parameter is the <em>channel</em> parameter. Select the desired channel at which the device will be monitoring.\nParameter <em>interval</em> is the time period (in miliseconds) of saving the data into the database. The parameter <em>interval</em> shall be the multiple of 96 which is the duration of a DAB frame in miliseconds. It is discouraged to set the <em>interval</em> to low value bacause that could fill up the free space relatively quickly.\nAdditionally, enable the parameter <em>trap enabled</em> when you want the monitoring device to evaluate quality indicators of the DAB broadcasting and send SNMP trap when the quality indicators are out of range. If you decide to enable traps, make sure to set up other SNMP-related paramers properly as well as alarm configuration before starting the device which you can find in the section <em>Alarm Configuration</em> in the <em>Configuration</em> tab. Next paragraph explains the section <em>Alarm Configuration</em>.\n</p>\n<p className=\"bp3-running-text\">\nIf you have decided to enable traps, it is required to set up the <em>Alarm Configuration</em> in the <em>Configuration</em> tab as well. Every quality indicator can be enabled or disabled independently from each other. Set up threshold values for each quality indicator. When the value is inside the specified threshold range, it evaluated as normal operation that doesn't generate the alarm. Trigger time is the waiting time before the alarm is generated. Note that when the alarm is generated, the trigger time is also the time which must pass before generating yet another alarm. Alarm is generated until it is resolved. Therefore, it is crucial to set up <em>Alarm Configuration</em> properly in order to prevent spamming false alarm!\n</p>\n<p className=\"bp3-running-text\">\nStarting the monitoring process is not a simple task and that's why it is neccessary to set up the configuration of the device before starting the monitoring. In order to start the device, open the section <em>Status</em> in the right-hand aside panel. By opening the <em>Status</em> section, the current status of the monitoring device is acquired which may take a while. Once the current status is acquired, proceed by clicking on the big green <em>Start</em> button. When the request to start the device is successfully fullfiled, the small informative tost block appears at the top of the page. When the starting of the monitoring has been successful, you will see (after a little while) that all elements under the button turn to green, indicating that that script, process or resource is ok. Note that when you have disabled the traps, the evaluation script is turned off. In order to stop the monitoring, you procced very similarly.\n</p>\n<p className=\"bp3-running-text\">\nRegarding the spectrogram, note that the server is sometimes busy and cannot respond to the requests. In that case, the spectrogram cannot be updated. Furthermore, when response time of the server is bigger than the period of updating the spectrogram, the data included in the response are discarded.\n</p>\n<p className=\"bp3-running-text\">\nThank you for taking the time to read this user's manual. Hopefully, now you understand how to use this device. My contact: <em>jakub.svajka98@gmail.com</em>.\n</p>\n            </div>\n        </CollapsibleSection>\n\n        <CollapsibleSection label=\"Glossary\">\n            <div className=\"db-medium\">\n<Pair\n    pair={{\n        key: \"A Bit Error Ratio is the number of bit errors divided by the total number of transferred bits during a studied time interval. Bit error ratio is a unitless performance measure, often expressed as a percentage.\",\n        value: \"Bit Error Ratio (BER)\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Pair\n    pair={{\n        key: \"A Signal Noise Ratio is the ratio of signal power to the noise power, and its unit of expression is typically decibels (dB).\",\n        value: \"Signal Noise Ratio (SNR)\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Pair\n    pair={{\n        key: \"A FIB Error Ratio is the ratio of CRC errors of FIB channel to the total number of transferred blocks during a studied time interval.\",\n        value: \"FIB Error Ratio (FIBER)\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Pair\n    pair={{\n        key: \"RF Power represents the average power of the spectrum. Note that the value is not absolute (the value doesn't represent the real input power).\",\n        value: \"RF Power\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Pair\n    pair={{\n        key: \"This value indicates whether the monitoring device has found the null symbol in DAB frame. This value can also be understood as whether any DAB broadcasting is present at that particular channel.\",\n        value: \"Signal Present\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Pair\n    pair={{\n        key: \"This value indicates whether the monitoring device has been able to synchronize. Synchronization is very important in DAB. If the device is unable to synchronize, it cannot work properly.\",\n        value: \"Synchronized\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Divider style={{ marginBottom: \"1em\" }}/>\n<Pair\n    pair={{\n        key: \"Power Spectral Density of the signal describes the power present in the signal as a function of frequency, per unit frequency. Power spectral density is commonly expressed in watts per hertz (W/Hz).\",\n        value: \"Power Spectral Density (PSD)\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Pair\n    pair={{\n        key: \"A Transmitter Identification Information is a way to uniquely identify a transmitter, specifically by the combination of pattern and comb values.\",\n        value: \"Transmitter Identification Information (TII)\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Pair\n    pair={{\n        key: \"A Dynamic Label Segment, is a text accompanying the digital radio. A maximum of 128 bytes can be transmitted per label segment. Typical dynamic label content is the music title and artist currently playing, the hotline telephone number of the radio station or the latest short messages.\",\n        value: \"Dynamic Label Segment (DLS)\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Pair\n    pair={{\n        key: \"Ensemble is a group (multiplex) of radio stations. A multiplex is a stream of digital information that includes audio and other data transmitted on a single radio channel.\",\n        value: \"Ensemble\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n    parentTagStyle={{ marginBottom: \"1em\" }}\n/>\n<Pair\n    pair={{\n        key: \"A spectrogram is a visual representation of the spectrum in time. One can see variation of a spectrum in time.\",\n        value: \"Spectogram\"\n    }}\n    keyTagStyle={{ color: \"#182026\" }}\n/>\n            </div>\n        </CollapsibleSection>\n\n        <CollapsibleSection label=\"System Information\">\n            <DeviceInfo />\n        </CollapsibleSection>\n        </>\n    );\n});\n\nexport default Documentation;\n","import React from \"react\";\n\n\ninterface ILogoProps {\n    onClick: () => void;\n}\n\nconst Logo: React.FC<ILogoProps> = ({ onClick }) => {\n    return (\n        <div id=\"logo\" className=\"bp3-heading\" onClick={onClick}>DAB<span className=\"bp3-button bp3-intent-primary\">ING</span>+</div>\n    );\n};\n\nexport default Logo;\n","import React from \"react\";\n\nimport { Button, NonIdealState, Spinner, Tag } from \"@blueprintjs/core\";\nimport { ButtonProps } from \"@blueprintjs/core\";\n\nimport { useFetchState } from \"../hooks/useFetchState\";\nimport { HOSTNAME } from \"../constants\";\nimport { TheToaster } from \"../index\";\n\n\ntype TypeStatus = {\n    label: string;\n    isOn: boolean;\n    isOk: boolean;\n}\n\ntype TypeBtnState = \"Loading\" | \"Start\" | \"Stop\";\n\n/**\n * Defines and evaluates the looks of the status element\n * An element might be OFF but that might be OK.\n */\nconst StatusElement: React.FC<{ status: TypeStatus }> = ({ status }): JSX.Element => {\n    let tag: JSX.Element;\n    if (status.isOn)\n        tag = <Tag intent={status.isOk ? \"success\" : \"danger\"} round={true} fill={false}>ON</Tag>;\n    else\n        tag = <Tag intent={status.isOk ? \"success\" : \"danger\"} round={true} fill={false}>OFF</Tag>;\n    return (\n        <>\n            <span>{status.label}</span>\n            {tag}\n        </>\n    );\n}\n\nconst Widget1 = React.memo(() => {\n    const { isLoading, data, error } = useFetchState<TypeStatus[] | undefined>(\n        undefined,\n        `${HOSTNAME}flask/info/status`,\n        undefined,\n        5000\n    );\n    const [btnState, setBtnState] = React.useState<TypeBtnState>(\"Loading\");\n\n    const lockRef = React.useRef<boolean>(true);\n    const fetchLockRef = React.useRef<boolean>(true);\n\n    React.useEffect(() => {\n        if (data && fetchLockRef.current) {\n            const flag: boolean = data.some(element => element.isOk === false);\n\n            if (flag) {\n                lockRef.current && setBtnState(\"Start\");\n            }\n            else {\n                lockRef.current && setBtnState(\"Stop\");\n            }\n        }\n    }, [data]);\n\n    React.useEffect(() => {\n        // Clean up the mess on unmount\n        return () => {\n            // prevent setting new state in all asynch functions\n            lockRef.current = false;\n        };\n    }, []);\n\n    const buttonProps: ButtonProps = React.useMemo(() => {\n        /* executes appropriate fetch */\n        const handleStartStop = async (url: string, start: boolean) => {\n            lockRef.current && setBtnState(\"Loading\");\n            lockRef.current && (fetchLockRef.current = false);\n\n            fetch(url)\n            .then(async (response: Response) => {\n                if (response.ok) {\n                    TheToaster.show({\n                        icon: \"tick\",\n                        intent: \"success\",\n                        message: (<>\n                            Successfully {start ? \"started\" : \"stopped\"} the application.\n                        </>)\n                    });\n                }\n                else {\n                    TheToaster.show({\n                        icon: \"issue\",\n                        intent: \"danger\",\n                        timeout: 0,\n                        message: (<>\n                            [Error: {response.status} {response.statusText}] <br />\n                            <hr />\n                            Unable to {start ? \"start\" : \"stop\"} the application!\n                        </>)\n                    });\n                }\n            })\n            .catch((error: Error) => {\n                TheToaster.show({\n                    icon: \"issue\",\n                    intent: \"danger\",\n                    timeout: 0,\n                    message: (<>\n                        [{error.name}] <br />\n                        [{error.message}] <br />\n                        <hr />\n                        Unable to {start ? \"start\" : \"stop\"} the application!\n                    </>)\n                });\n            })\n            .finally(() => {\n                lockRef.current && (fetchLockRef.current = true);\n            });\n        };\n\n        switch(btnState) {\n            case \"Start\":\n                return {\n                    intent: \"success\",\n                    disabled: false,\n                    loading: false,\n                    text: btnState,\n                    onClick: () => handleStartStop(`${HOSTNAME}flask/start`, true)\n                };\n            case \"Stop\" :\n                return {\n                    intent: \"danger\",\n                    disabled: false,\n                    loading: false,\n                    text: btnState,\n                    onClick: () => handleStartStop(`${HOSTNAME}flask/stop`, false)\n                };\n            case \"Loading\":\n            default:\n                return {\n                    intent: \"none\",\n                    disabled: true,\n                    loading: true,\n                    text: btnState\n                };\n        }\n    }, [btnState]);\n\n    if (data === undefined && isLoading) {\n        return (\n            <>\n            <Spinner />\n            <p style={{ textAlign: \"center\" }}>Attempting to fetch the current status.</p>\n            </>\n        );\n    }\n\n    if (error !== undefined) {\n        if (error instanceof Error) {\n            return (\n                <NonIdealState\n                    icon=\"issue\"\n                    title={`[${error.name}]`}\n                    description={<>\n                        {error.message} <br />\n                        Unable to fetch the current status!\n                    </>}\n                />\n            );\n        }\n        if (error instanceof Response) {\n            return (\n                <NonIdealState\n                    icon=\"issue\"\n                    title={`[Error: ${error.status} ${error.statusText}]`}\n                    description={\"Unable to fetch the current status!\"}\n                />\n            );\n        }\n    }\n\n    return (\n        <div className=\"db-widget-container\">\n            <Button\n                {...buttonProps}\n                alignText=\"center\"\n                fill={true}\n                large={true}\n                outlined={false}\n            />\n            <div className=\"db-status-container\">\n                {data?.map((item, key) => \n                    <StatusElement key={key} status={item} />\n                )}\n            </div>\n        </div>\n    );\n});\n\nexport default Widget1;\n","import React from \"react\";\n\nimport { Button, ButtonProps, Dialog, Classes } from \"@blueprintjs/core\";\n\nimport Pair from \"./common/Pair\";\n\nimport { TypeMuxService } from \"../types/mux\";\nimport { IAudio } from \"../hooks/useAudio\";\nimport { HOSTNAME } from \"../constants\";\n\n\nconst asctyTooltipContent: JSX.Element = (\n    <span style={{fontWeight:600}}>Audio Service Component Type</span>\n);\n\nconst subchidTooltipContent: JSX.Element = (\n    <span style={{fontWeight:600}}>Sub-Channel Identifier</span>\n);\n\nconst dsctyTooltipContent: JSX.Element = (\n    <span style={{fontWeight:600}}>Data Service Component Type</span>\n);\n\nconst scidTooltipContent: JSX.Element = (\n    <span style={{fontWeight:600}}>Service Component Identifier</span>\n);\n\ninterface IServiceProps extends IAudio {\n    service: TypeMuxService;\n}\n\nconst Service: React.FC<IServiceProps> = ({ service, audio, dispatchAudio }) => {\n    const [isOpen, setIsOpen] = React.useState<boolean>(false);\n    // isOpen is controlling whether the Dialog component is visible\n    // The purpose of Dialog component is to show detailed information about\n    // that particular service. Dialog component uses portal, therefore it\n    // can be anywhere in the code (it is rendered across the whole page)\n\n    const audioButtonProps: ButtonProps = React.useMemo(() => {\n        const url_mp3 = `${HOSTNAME}welle${service.url_mp3}`;\n\n        let sanitizedState = audio.state;\n        if (audio.src !== url_mp3) {\n            // Show green play button when this particular service is not playing\n            sanitizedState = \"stop\";\n        }\n\n        switch(sanitizedState) {\n            case \"start\":\n                // button is loading\n                return {\n                    intent: \"none\",\n                    disabled: true,\n                    loading: true\n                };\n            case \"playing\":\n                // button is red with stop icon\n                return {\n                    icon: \"stop\",\n                    intent: \"danger\",\n                    onClick: () => dispatchAudio({ type: \"stop\" })\n                };\n            case \"stop\":\n            case \"init\":\n            default:\n                // button is green with play icon\n                return {\n                    icon: \"play\",\n                    intent: \"success\",\n                    onClick: () => dispatchAudio({ type: \"start\", payload: url_mp3 })\n                };\n        }\n    }, [audio, dispatchAudio, service.url_mp3]);\n\n    const component = service.components[0];\n\n    return (\n        <>\n        <tr>\n            <td style={{\"verticalAlign\":\"middle\"}}>{service.label.shortlabel}</td>\n            <td style={{\"verticalAlign\":\"middle\"}}>{service.ptystring}</td>\n            <td style={{\"verticalAlign\":\"middle\",\"textAlign\":\"center\"}}>\n                <Button small={true} {...audioButtonProps} />\n            </td>\n            <td style={{\"verticalAlign\":\"middle\",\"textAlign\":\"center\"}}>\n                <Button icon=\"info-sign\" intent=\"primary\" small={true} onClick={() => setIsOpen(true)} />\n            </td>\n        </tr>\n        <Dialog\n            isOpen={isOpen}\n            onClose={() => setIsOpen(false)}\n            title={\n                <img\n                    width=\"150px\"\n                    src={`${HOSTNAME}welle/slide/${service.sid}`}\n                    alt={service.label.label}\n                />\n            }\n            isCloseButtonShown={false}\n        >\n        <div className={Classes.DIALOG_BODY}>\n            <div className=\"db-small-grid-container\">\n                <Pair pair={{ key: \"Dynamic Label Segment\", value: service.dls.label }} parentTagStyle={{ gridColumn: \"1 / 4\" }} />\n                <Pair pair={{ key: \"Label\", value: service.label.label }} />\n                <Pair pair={{ key: \"Program Type\", value: service.ptystring }} />\n                <Pair pair={{ key: \"Language\", value: service.languagestring }} />\n                <Pair pair={{ key: \"Source Coding\", value: service.mode.split(\",\")[0] }} />\n                <Pair pair={{ key: \"Sample Rate\", value: service.samplerate, unit: \"Hz\" }} />\n                <Pair pair={{ key: \"Bitrate\", value: component.subchannel.bitrate, unit: \"kbit/s\" }} />\n                <Pair pair={{ key: \"Service Identifier\", value: service.sid }} />\n                <Pair pair={{ key: \"ASCTy\", value: component.ascty }} tooltipContent={asctyTooltipContent} />\n            </div>\n        </div>\n        <div className={Classes.DIALOG_BODY}>\n            <div className=\"db-small-grid-container\">\n                <Pair pair={{ key: \"SubChId\", value: component.subchannel.subchid }} tooltipContent={subchidTooltipContent} />\n                <Pair pair={{ key: \"Start Address\", value: component.subchannel.sad }} />\n                <Pair pair={{ key: \"Capacity Unit\", value: component.subchannel.cu }} />\n                <Pair pair={{ key: \"Language Code\", value: service.language }} />\n                <Pair pair={{ key: \"Program Type Code\", value: service.programType }} />\n                <Pair pair={{ key: \"Protection\", value: component.subchannel.protection }} />\n                <Pair pair={{ key: \"DSCTy\", value: component.dscty }} tooltipContent={dsctyTooltipContent} />\n                <Pair pair={{ key: \"Label\", value: component.label.label }} />\n                <Pair pair={{ key: \"SCId\", value: component.scid }} tooltipContent={scidTooltipContent} />\n                <Pair pair={{ key: \"Transport Mode\", value: component.transportmode }} valueTagStyle={{ textTransform: \"capitalize\" }} />\n            </div>\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                <Button onClick={() => setIsOpen(false)}>Close</Button>\n            </div>\n        </div>\n        </Dialog>\n        </>\n    );\n};\n\nexport default Service;\n","import React from \"react\";\n\nimport { HTMLTable, Button, NonIdealState } from \"@blueprintjs/core\";\nimport { Tooltip2 as Tooltip, Classes } from \"@blueprintjs/popover2\";\n\nimport Service from \"./Service\";\n\nimport { IMuxServicesProps } from \"../types/mux\";\nimport Help from \"./common/Help\";\nimport { IAudio } from \"../hooks/useAudio\";\n\nconst ptyTooltipContent: JSX.Element = (\n    <span style={{\"fontWeight\":600}}>Program Type</span>\n);\n\nconst audioHelpContent: JSX.Element = (\n    <>\n    <p>Press <Button icon=\"play\" intent=\"success\" small={true} /> button to start the audio.</p>\n    <p>Press <Button icon=\"stop\" intent=\"danger\" small={true} /> button to stop the audio.</p>\n    <p>When you change the service, the currently <br />\n       playing audio turns off automatically.</p>\n    </>\n);\n\nconst infoHelpContent: JSX.Element = (\n    <>\n    <p>Additional information of the corresponding service will be <br />\n       displayed by pressing <Button icon=\"info-sign\" intent=\"primary\" small={true} /> button.</p>\n    <p>Note that some of the fields are unavailable (N/A) until <br />\n       you start playing the audio!</p>\n    </>\n);\n\ninterface IWidget2Props extends IMuxServicesProps, IAudio {}\n\nconst Widget2 = ({\n    services,\n    audio,\n    dispatchAudio\n}: IWidget2Props) => {\n    // When services are undefined, it means that welle is not running.\n    if (services === undefined) {\n        return (\n            <NonIdealState\n                icon=\"issue\"\n                title=\"Services not found\"\n                description=\"Welle-cli is not running!\"\n            />\n        );\n    }\n\n    // When services is empty array, it means that welle was unable to decode FIC.\n    // This can be due to weak signal.\n    if (services.length === 0) {\n        return (\n            <NonIdealState\n                icon=\"issue\"\n                title=\"Services not found\"\n                description=\"Wait...\"\n            />\n        );\n    }\n\n    // Sort services by their Sub-Channel Identifier\n    services.sort((a, b) => a.components[0].subchannel.subchid - b.components[0].subchannel.subchid);\n\n    return (\n        <HTMLTable\n            bordered={false}\n            condensed={true}\n            interactive={false}\n            striped={true}\n            width=\"100%\"\n        >\n        <thead>\n            <tr>\n                <th style={{\"verticalAlign\":\"middle\"}}>Label</th>\n                <th style={{\"verticalAlign\":\"middle\"}}>\n                <Tooltip\n                    className={Classes.TOOLTIP2_INDICATOR}\n                    content={ptyTooltipContent}\n                    position=\"top\"\n                >PTy</Tooltip>\n                </th>\n                <th style={{\"verticalAlign\":\"middle\",\"textAlign\":\"center\"}}>\n                <Help content={audioHelpContent} buttonProps={{ small: true }} />\n                </th>\n                <th style={{\"verticalAlign\":\"middle\",\"textAlign\":\"center\"}}>\n                <Help content={infoHelpContent} buttonProps={{ small: true }} />\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            {services.map((service) => \n                <Service\n                    key={service.sid}\n                    service={service}\n                    audio={audio}\n                    dispatchAudio={dispatchAudio}\n                />\n            )}\n        </tbody>\n        </HTMLTable>\n    );\n};\n\nexport default Widget2;\n","import React from \"react\";\n\nexport type TAudioState = \"start\" | \"stop\";\n\nexport type TAudio = {\n    state: TAudioState | \"playing\" | \"init\";\n    isPlaying: boolean | undefined;\n    src: string | undefined;\n};\n\ntype TAudioPrivateAction = {\n    type: TAudioState | \"playing\" | \"init\";\n    payload?: string;\n};\n\nexport type TAudioAction = {\n    type: TAudioState;\n    payload?: string;\n}\n\nexport interface IAudioProps {\n    onSuccess: (state: TAudioState) => void;\n    onError: (state: TAudioState) => void;\n}\n\nexport interface IAudio {\n    audio: TAudio;\n    dispatchAudio: React.Dispatch<TAudioAction>;\n}\n\nconst initAudio: TAudio = {\n    state: \"init\",\n    isPlaying: undefined,\n    src: undefined\n};\n\nconst initAudioRef: HTMLAudioElement = new Audio(undefined);\n\nconst audioReducer = (state: TAudio, action: TAudioPrivateAction): TAudio => {\n    switch(action.type) {\n        case \"start\":\n            return {\n                state: action.type,\n                isPlaying: undefined,\n                src: action.payload\n            };\n        case \"playing\":\n            return {\n                state: action.type,\n                isPlaying: true,\n                src: state.src\n            };\n        case \"stop\":\n            return {\n                state: action.type,\n                isPlaying: false,\n                src: undefined\n            };\n        case \"init\":\n        default:\n            return initAudio;\n    }\n};\n\nexport function useAudio(\n    { onSuccess, onError }: IAudioProps\n): [IAudio[\"audio\"], IAudio[\"dispatchAudio\"]] {\n    const [audio, dispatchAudio] = React.useReducer(audioReducer, initAudio);\n    const audioRef = React.useRef<HTMLAudioElement>(initAudioRef);\n\n    const publicDispatchAudio: React.Dispatch<TAudioAction> = dispatchAudio;\n\n    React.useEffect(() => {\n        function check(): boolean {\n            return audioRef.current.src === audioRef.current.currentSrc;\n        }\n\n        if (audio.state === \"start\") {\n            if (audio.src) {\n                audioRef.current.src = audio.src;\n\n                audioRef.current.play().then(() => {\n                    check() && dispatchAudio({ type: \"playing\" });\n                    check() && onSuccess(\"start\");\n                }).catch(() => {\n                    check() && dispatchAudio({ type: \"stop\" });\n                    check() && onError(\"start\");\n                });\n            }\n        }\n        if (audio.state === \"stop\") {\n            // clean up funtion of the useEffect does basically the same\n            audioRef.current.pause();\n            onSuccess(\"stop\");\n            // but we want to let user know when the audio stopped the usual way\n        }\n    }, [audio, onSuccess, onError]);\n\n    React.useEffect(() => {\n        return () => {\n            // audioRef does not refer to a node rendered by React\n            // => we can ignore this warning\n            // eslint-disable-next-line\n            audioRef.current.pause();\n            // stop any audio if there is one\n        };\n    }, []);\n\n    return [audio, publicDispatchAudio];\n}\n","import React, { useState } from \"react\";\n\nimport { Button, Navbar } from \"@blueprintjs/core\";\nimport \"normalize.css/normalize.css\"\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\"\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"./styles/Dabing.css\";\n\nimport Dashboard from \"./Dashboard\";\nimport Configuration from \"./Configuration\";\nimport Documentation from \"./Documentation\";\n\nimport Logo from \"./components/common/Logo\";\nimport CollapsibleSection from \"./components/common/CollapsibleSection\";\nimport Widget1 from \"./components/Widget1\";\nimport Widget2 from \"./components/Widget2\";\n\nimport { TAudioState, useAudio } from \"./hooks/useAudio\";\nimport { useFetchState } from \"./hooks/useFetchState\";\nimport { TheToaster } from \"./index\";\n\nimport { TypeMux } from \"./types/mux\";\nimport { HOSTNAME } from \"./constants\";\n\n\ntype TPages = \"dashboard\" | \"configuration\" | \"documentation\";\n\nconst audioOnSuccess = (state: TAudioState) => {\n    TheToaster.show({\n        icon: \"tick\",\n        intent: \"success\",\n        message: `Successfully ${state === \"start\" ? \"started\" : \"stopped\"} the audio!`\n    });\n};\n\nconst audioOnError = (state: TAudioState) => {\n    TheToaster.show({\n        icon: \"issue\",\n        intent: \"danger\",\n        message: `Unable to ${state === \"start\" ? \"start\" : \"stop\"} the audio!`\n    });\n};\n\nconst Dabing: React.FC = () => {\n    const [activePage, setPage] = useState<TPages>(\"dashboard\");\n    const [audio, dispatchAudio] = useAudio({\n        onSuccess: audioOnSuccess,\n        onError: audioOnError\n    });\n    const {\n        // eslint-disable-next-line\n        isLoading, data, error\n    } = useFetchState<TypeMux | undefined>(\n        undefined,\n        `${HOSTNAME}welle/mux.json`,\n        undefined,\n        5000\n    );\n\n    function renderPage() {\n        switch(activePage) {\n            case \"configuration\":\n                return <Configuration />;\n            case \"documentation\":\n                return <Documentation />;\n            case \"dashboard\":\n            default:\n                return <Dashboard mux={data} />\n        }\n    }\n\n    return (\n        <>\n            <Navbar style={{\"padding\": \"0\"}}>\n            <div className=\"db-navbar-grid-container\">\n                <div className=\"db-navbar-grid-item\">\n                    <Navbar.Group align=\"left\">\n                        <Navbar.Heading><Logo onClick={() => setPage(\"dashboard\")}/></Navbar.Heading>\n                        <Navbar.Divider />\n                        <Button\n                            minimal={true}\n                            icon=\"dashboard\"\n                            text=\"Dashboard\"\n                            intent={activePage === \"dashboard\" ? \"primary\" : \"none\"}\n                            onClick={() => setPage(\"dashboard\")}\n                        />\n                        <Button\n                            minimal={true}\n                            icon=\"cog\"\n                            text=\"Configuration\"\n                            intent={activePage === \"configuration\" ? \"primary\" : \"none\"}\n                            onClick={() => setPage(\"configuration\")}\n                        />\n                        <Button\n                            minimal={true}\n                            icon=\"book\"\n                            text=\"Documentation\"\n                            intent={activePage === \"documentation\" ? \"primary\" : \"none\"}\n                            onClick={() => setPage(\"documentation\")}\n                        />\n                    </Navbar.Group>\n                </div>\n            </div>\n            </Navbar>\n            <div className=\"db-dabing-grid-container\">\n                <main className=\"db-dabing-grid-item\">\n                    {renderPage()}\n                </main>\n                <aside className=\"db-dabing-grid-item db-aside-panel\">\n                    <CollapsibleSection label=\"Status\">\n                        <Widget1 />\n                    </CollapsibleSection>\n                    <CollapsibleSection label=\"Services\">\n                        <Widget2 services={data?.services} audio={audio} dispatchAudio={dispatchAudio} />\n                    </CollapsibleSection>\n                </aside>\n            </div>\n        </>\n    );\n};\n\nexport default Dabing;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Dabing from \"./Dabing\";\n\nimport { Toaster } from \"@blueprintjs/core\";\n\nexport const TheToaster = Toaster.create({\n    maxToasts: 3,\n    position: \"top\",\n    autoFocus: false,\n    canEscapeKeyClear: true\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <Dabing />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}